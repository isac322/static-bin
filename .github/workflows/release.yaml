name: Release

on:
  create:

  workflow_dispatch:
    inputs:
      target:
        type: string
        required: true
        description: Directory name to release
      latest:
        type: boolean
        required: false
        description: tag as latest

env:
  REGISTRY: "ghcr.io"
  OWNER: "${{ github.repository_owner }}"


jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'create' && github.event.ref_type == 'tag'
    steps:
      - uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.OWNER }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Read tag
        id: metadata
        # language=Bash
        run: |
          if [ '${{ github.event_name }}' == 'workflow_dispatch' ]; then
            target='${{ inputs.target }}'
            use_latest='${{ inputs.latest }}'
          else
            tag='${{ github.event.ref }}'
            target="${tag%%@*}"
            use_latest=true
          fi
          tagSuffix="$(jq -crM '.tagSuffix // ""' "$target/.metadata.json")"
          version="$(jq -cerM '.version' "$target/.metadata.json")"
          if [ -z "$tagSuffix" ]; then
            echo "use_latest=$use_latest" >> $GITHUB_OUTPUT
          else
            echo 'use_latest=false' >> $GITHUB_OUTPUT
          fi
          
          echo "target=$target" >> $GITHUB_OUTPUT
          echo "image=$(jq -cerM '.imageName' "$target/.metadata.json")" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "description=$(jq -cerM '.description' "$target/.metadata.json")" >> $GITHUB_OUTPUT
          echo "platforms=$(jq -cerM '.platforms | join(",")' "$target/.metadata.json")" >> $GITHUB_OUTPUT
          readarray -t tag_formats < <(jq -crM '.tagFormats[]' "$target/.metadata.json")
          echo "TAG_FORMATS<<EOF" >> $GITHUB_ENV
          for f in "${tag_formats[@]}"; do
            if [ -n "$tagSuffix" ]; then
              echo "$f,suffix=-$tagSuffix,value=$version" >> $GITHUB_ENV
            else
              echo "$f,value=$version" >> $GITHUB_ENV
            fi
          done
          if [ -n "$tagSuffix" ]; then
            echo "type=raw,value=$tagSuffix" >> $GITHUB_ENV
          fi
          echo "EOF" >> $GITHUB_ENV

      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v4
        with:
          flavor: latest=${{ steps.metadata.outputs.use_latest }}
          images: ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ steps.metadata.outputs.image }}
          tags: ${{ env.TAG_FORMATS }}
          labels: |
            org.opencontainers.image.title=${{ steps.metadata.outputs.image }}
            org.opencontainers.image.url='${{ github.event.repository.html_url }}/tree/HEAD/${{ steps.metadata.outputs.target }}'
            org.opencontainers.image.source='${{ github.event.repository.html_url }}/tree/HEAD/${{ steps.metadata.outputs.target }}'
            org.opencontainers.image.description='${{ steps.metadata.outputs.description }}'
            org.opencontainers.image.base.name=scratch
            org.opencontainers.image.version='${{ steps.metadata.outputs.version }}'

#            org.opencontainers.image.documentation=URL

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: '{{defaultContext}}:${{ steps.metadata.outputs.target }}'
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          platforms: ${{ steps.metadata.outputs.platforms }}
          build-args: |
            VERSION=${{ steps.metadata.outputs.version }}

      - name: Export binaries to local
        uses: docker/build-push-action@v4
        with:
          context: '{{defaultContext}}:${{ steps.metadata.outputs.target }}'
          platforms: ${{ steps.metadata.outputs.platforms }}
          build-args: |
            VERSION=${{ steps.metadata.outputs.version }}
          outputs: type=local,dest=bin
          target: output

      - run: find bin -type f -name 'provenance.json' -delete

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: '${{ steps.metadata.outputs.target }}@${{ steps.metadata.outputs.version }}'
          files: |
            bin/**/*
          generate_release_notes: true
          fail_on_unmatched_files: true

      - name: Release latest
        if: github.event_name != 'workflow_dispatch' || steps.metadata.outputs.use_latest == 'true'
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.metadata.outputs.target }}
          tag_name: '${{ steps.metadata.outputs.target }}@${{ steps.metadata.outputs.version }}'
          files: |
            bin/**/*
          generate_release_notes: true
          fail_on_unmatched_files: true
