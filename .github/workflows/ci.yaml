name: CI

on:
  pull_request:
  workflow_dispatch:

jobs:
  collect-images:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.changed-files.outputs.all_changed_files }}
      image_changed: ${{ steps.changed-files.outputs.any_changed }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v37
        with:
          files: |
            **/.metadata.json
            **/Dockerfile
          dir_names: true
          dir_names_exclude_current_dir: true
          dir_names_max_depth: 1
          json: true
      - run: echo '${{ steps.changed-files.outputs.all_changed_files }}' && echo '${{ steps.changed-files.outputs.any_changed }}'

  build:
    runs-on: ubuntu-latest
    needs: collect-images
    if: ${{ needs.collect-images.outputs.image_changed == 'true' }}
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJSON(needs.collect-images.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v3

      - name: Read metadata
        id: metadata
        working-directory: "${{ matrix.image }}"
        # language=Bash
        run: |
          echo "version=$(jq -cerM '.version' .metadata.json)" >> $GITHUB_OUTPUT
          echo "platforms=$(jq -cerM '.platforms | join(",")' .metadata.json)" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: '{{defaultContext}}:${{ matrix.image }}'
          platforms: ${{ steps.metadata.outputs.platforms }}
          build-args: |
            VERSION=${{ steps.metadata.outputs.version }}

  build-result:
    if: always()
    needs:
      - collect-images
      - build
    runs-on: ubuntu-latest
    steps:
      - if: needs.collect-images.outputs.image_changed != 'true' && needs.build.result != 'success' && needs.build.result != 'skipped'
        run: exit 1
