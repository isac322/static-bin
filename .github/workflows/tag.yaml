name: Tag

on:
  push:
    branches:
      - master

  workflow_dispatch:
    inputs:
      image:
        type: string
        required: true
        description: Directory name to tag
      recreate:
        type: boolean
        required: false
        description: Recreate tag & release if exists
        default: false

jobs:
  tag:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Get changed files
        if: github.event_name == 'push'
        id: changed-files
        uses: tj-actions/changed-files@v41
        with:
          files: |
            **/.metadata.json
          dir_names: true
          dir_names_exclude_current_dir: true
          dir_names_max_depth: 1
          json: true
          escape_json: false
      - name: Create tag
        if: github.event_name == 'workflow_dispatch' || steps.changed-files.outputs.any_changed == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GHA_PAT }}
          # language=JavaScript
          script: |
            const fs = require('fs/promises')
            const path = require('path')
            const images = context.eventName === 'workflow_dispatch' ? ['${{ inputs.image }}'] : ${{ steps.changed-files.outputs.all_changed_files || '[]' }}
            if (images.length === 0) {
                core.debug('no image changed')
                return
            }
            
            core.info(`Will tag ${images}`)
            await Promise.all(images.map(async image => {
                core.info(`tagging ${image}...`)
                const metadata = await fs.readFile(path.join(image, '.metadata.json'), {encoding: 'utf-8'})
                const version = JSON.parse(metadata).version
                const tag = `${image}@${version}`;
            
                if ('${{ inputs.recreate }}' === 'true' || context.eventName === 'create') {
                    core.debug(`searching existing release with tag ${tag}...`)
                    try {
                        const res = await github.rest.repos.getReleaseByTag({
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                            tag
                        })
                        core.debug(JSON.stringify(res))            
            
                        core.info(`found existing release ID ${res.data.id}`)
                        await github.rest.repos.deleteRelease({
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                            release_id: res.data.id
                        })
                    } catch (e) {
                        if (e.status !== 404) {
                            throw e
                        }
                    }
            
                    try {
                        core.debug(`not found existing release with tag ${tag}`)
                        await github.rest.git.deleteRef({
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                            ref: `tags/${tag}`
                        })
                    } catch (e) {
                        if (e.status !== 422) {
                            throw e
                        }
                    }
                }
            
                core.info(`tag ${tag}`)
                await github.rest.git.createRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: `refs/tags/${tag}`,
                    sha: context.sha
                })
            }))
